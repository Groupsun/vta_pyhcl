# VTA pyhcl implementation of core/ISA.scala
# Author: SunnyChen
# Date:   2020-05-25
from pyhcl import *

# ISA constants
INST_BITS = 128

OP_BITS = 3

M_DEP_BITS = 4
M_ID_BITS = 2
M_SRAM_OFFSET_BITS = 16
M_DRAM_OFFSET_BITS = 32
M_SIZE_BITS = 16
M_STRIDE_BITS = 16
M_PAD_BITS = 4

C_UOP_BGN_BITS = 13
C_UOP_END_BITS = 14
C_ITER_BITS = 14
C_AIDX_BITS = 11
C_IIDX_BITS = 11
C_WIDX_BITS = 10
C_ALU_DEC_BITS = 2
C_ALU_OP_BITS = 3
C_ALU_IMM_BITS = 16

Y = Bool(True)
N = Bool(False)

U.w(OP_BITS)(0)
OP_L = U.w(OP_BITS)(0)
OP_S = U.w(OP_BITS)(1)
OP_G = U.w(OP_BITS)(2)
OP_F = U.w(OP_BITS)(3)
OP_A = U.w(OP_BITS)(4)
OP_X = U.w(OP_BITS)(5)

ALU_OP_NUM = 5
ALU_OP = [U(i) for i in range(5)]

M_ID_U = U.w(M_ID_BITS)(0)
M_ID_W = U.w(M_ID_BITS)(1)
M_ID_I = U.w(M_ID_BITS)(2)
M_ID_A = U.w(M_ID_BITS)(3)

# VTA ISA
LUOP = BitPat("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????00????000")
LWGT = BitPat("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????01????000")
LINP = BitPat("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????10????000")
LACC = BitPat("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????11????000")
SOUT = BitPat("?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????001")
GEMM = BitPat("?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????010")
VMIN = BitPat("??????????????????00?????????????????????????????????????????????????????????????????????????????????????????????????????????100")
VMAX = BitPat("??????????????????01?????????????????????????????????????????????????????????????????????????????????????????????????????????100")
VADD = BitPat("??????????????????10?????????????????????????????????????????????????????????????????????????????????????????????????????????100")
VSHX = BitPat("??????????????????11?????????????????????????????????????????????????????????????????????????????????????????????????????????100")
FNSH = BitPat("?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????011")

# MemDecode bit range helper
hxpad_1 = [0, M_PAD_BITS-1]
hxpad_0 = [hxpad_1[1]+1, hxpad_1[1]+M_PAD_BITS]
hypad_1 = [hxpad_0[1]+1, hxpad_0[1]+M_PAD_BITS]
hypad_0 = [hypad_1[1]+1, hypad_1[1]+M_PAD_BITS]
hxstride = [hypad_0[1]+1, hypad_0[1]+M_STRIDE_BITS]
hxsize = [hxstride[1]+1, hxstride[1]+M_SIZE_BITS]
hysize = [hxsize[1]+1, hxsize[1]+M_SIZE_BITS]
hempty_0 = [hysize[1]+1, hysize[1]+7]
hdram_offset = [hempty_0[1]+1, hempty_0[1]+M_DRAM_OFFSET_BITS]
hsram_offset = [hdram_offset[1]+1, hdram_offset[1]+M_SRAM_OFFSET_BITS]
hid = [hsram_offset[1]+1, hsram_offset[1]+M_ID_BITS]
hpush_next = [hid[1]+1, hid[1]+1]
hpush_prev = [hpush_next[1]+1, hpush_next[1]+1]
hpop_next = [hpush_prev[1]+1, hpush_prev[1]+1]
hpop_prev = [hpop_next[1]+1, hpop_next[1]+1]
hop = [hpop_prev[1]+1, hpop_prev[1]+OP_BITS]


if __name__ == '__main__':
    pass
